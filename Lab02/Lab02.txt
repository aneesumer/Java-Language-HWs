Task 1
Create a Point class containing two fieds, x and y of type double. Create a method move(dx,dy) which can translate a point with coordinates dx and dy. Create a method mirror(cx,cy) which can reflect a point through the coordinates cx and cy.

Create a PointMain program to test the use of the Point class.

Task 2
Rewrite the mirror method in class Point in such a way that it has a single parameter of type Point, representing the point through which the reflexion should be performed.

Create a distance(p) method, which computes the distance of a point from the point p (provided as parameter). Use the Math.sqrt(...) function and the Pythagorean theorem.

Update the PointMain class to test the new operations!

Task 3
Implement the Complex class representing complex numbers with a real and imaginary component. The class should contain fields re and im of type double. Create a method abs() which computes the absolute value of the complex number.

Implement the add(c) and sub(c) and mul(c) methods, which, respectively, add another complex number c to a complex number, subtract c from the complex number and multiply the complex number with c. These methods should be used as, and should behave like, illustrated below.

alpha.re = 3
alpha.im = 2
beta.re = 1
beta.im = 2
alpha.add(beta)
// alpha.re == 4 && alpha.im == 4 && beta.re == 1 && beta.im == 2
Task 4
Create a class Circle representing circles with an origin (fields x and y of type double) and a radius (field of type double). Create a method enlarge(f), which multiplies the radius with f, enlarging the circle with a factor f (or shrinking if f is smaller than 1). Create a method getArea() which computes the area of the circle. Use the constant Math.PI!

Task 5
Write the Distance program, which interprets its command line arguments as a sequence of points, and sums up the distances found between any two consecutive points (i.e. the length of a polygonal chain, or polyline). The first two command line arguments represent the x and y coordinates of the first point, then the third and fourth command line arguments represent the second point, and so on. We can assume that the number of command line arguments is even, and each command line argument is an integer number.

The program should work by using the Point class and its distance method. For example, if the six coordinates of three points are provided as command line arguments, the program should compute the distance between the first two points, as well as the distance of the last two points, and print the sum of these two distances.

Examples:

> java Distance
0.0
> java Distance 1 2
0.0
> java Distance 0 0 3 4
5.0
> java Distance 1 2 4 6
5.0
> java Distance 1 2 4 6 7 6
8.0
Exercise 1
Create the method conjugate() in class Complex, which turns a complex number to its conjugate. Create the method reciprocate() as well, which turns the complex number to its reciprocal. Implement the div(c) method, which divides the complex number with the other complex number c provided as parameter.

Exercise 2
Create class Line, which can represent lines on a plane. A line is characterized by its points (x,y), which satisfy the equality ax+by=c. The fields of the Line class will be a, b and c, all of type double.

Create a method contains(p), which decides whether the point p lies on the line.

Create the methods isParallelWith(l) and isOrthogonalTo(l), which decide, respectively, whether a line is parallel to, and orthogonal (perpendicular) to the line l provided as a parameter.

Exercise 3
Create the class Segment representing line segments on a plane. This class will have four fields of type double: the coordinates of the two endpoints of the segment (x1, y1, x2, y2).

Create a method line() which returns a Line object representing the line that covers the segment.

Create a method contains(p) which decides whether the point p lies on the segment.

Create a method orientation(p) in class Segment which decides whether the vector from the first endpoint of the segment to its second endpoint and the given point p has orientation "clockwise" (right turn), "counter-clockwise" (left turn) or "colinear" (no turn). The method should return zero if the point is on the line covering the segment (colinear), a positive number if the orientation is clockwise, and a negative number if the orientation is counter-clockwise. This is actually quite simple. If we denote the coordinates of p with x3 and y3, our method should evaluate the following expression.

(y2−y1)(x3−x2)−(y3−y2)(x2−x1)
Create a method intersect(s) which decides whether a segment intersects with another segment s given as parameter. You can use the following tutorial.

http://www.dcs.gla.ac.uk/~pat/52233/slides/Geometry1x1.pdf (Links to an external site.)

Exercise 4
a
Create a Rectangle class to represent a rectangle (it sides are parallel to the coordinate axis). Store one of the vertex's x and y coordinate, the rectangle weight and height (double).

Weight and height can be negative too. For example, let r instance data members x=1, y=5, width=6, height=-2, in this case r's lower left vertex coordinates are 1 and 3.

Define topLeft(), topRight(), and bottomLeft() methods returning the corresponding vertex of the rectangle as Point.

Write the main program, which interprets its command line arguments as a sequence of rectangles, and calculate the enclosing rectangle of the rectangles. The command line arguments shall be numbers (at least 4). Process these arguments and write to the console the enclosing rectangle other vertexes.

$ java RectangleMain 3 5 1 -7 2 5 8 8
Bounding rectangle: 2.0;-2.0 - 10.0;13.0
The example above calculates the enclosing rectangle of two rectangles. The first rectangle's vertex is (3,5), weight is 1, height is -7. The second rectangle's vertex is (2,5), weifht and height is both 8. The enclosing rectangle left lower vertex is (2,-2), right upper vertex is (10,13), which is also the second rectangle right upper vertex.

b
Consider using Double.max(,) and Double.min(,) instead of if-else statements or ?: expressions.
